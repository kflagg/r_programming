[
["index.html", "An Introduction to Object-Oriented Programming Using R Syllabus Learning Outcomes Materials Course Outline", " An Introduction to Object-Oriented Programming Using R K.A. Flagg May 15, 2017 Syllabus Statistics and Data Science are fields that increasingly require computational problem-solving skills and bespoke solutions that are not implemented in point-and-click software. Thus, programming languages developed for scientific computing have become ubiquitous, and the free R language (R Core Team 2017) is now central to many Statistics courses and jobs. Unfortunately, Statistics education often focuses exclusively on using R as a tool for implementing and demonstrating statistical concepts; this does a disservice to students who are left to fend for themselves when presented tasks or error messages that do not fit into their set of familiar R experiences. Statisticians and Students in Statistics programs need to be R programmers, not just R users. Therefore, the goal of this course is to teach you to think like a programmer. This course will teach you both R and the concepts of object-oriented programming. If you are an aspiring statistician who wants to improve in either or both of those areas, this course is for you. If you have no R or programming experience, you will get a solid foundation in both. If you have used R before but had no formal programming training, this course will make you a much more effective R programmer. If you have had training in other object-oriented languages, you will learn the R language and how to apply object-oriented programming to statistical analysis. However, this course will not teach you Statistical concepts or give you a broad overview of Statistics features in R; many exercises and examples have a Statistics context but the focus is entirely on programming. Learning Outcomes Upon completion of this course, you will be able to: Explain how computers interpret and execute code. Evaluate conditional statements manually and in R. Describe and implement functions, objects, and methods in R. Develop conceptual models of programs and translate them into code. Debug your own programs and implement error/warning messages in R. Make your code reusable and shareable via R packages. Materials Naturally, you will need a recent version of R. The primary text for this course is R for Data Science (Wickham and Grolemund 2017). The required readings will be assigned from the most up-to-date online version, but you may purchase a physical copy if you wish. This book teaches a useful and standard set of R tools, and is organized to emphasize analysis and communication more than programming (but the brief section on programming is excellent). Please note that we will cover the topics in a very different order from how they are presented in the book and I will frequently point out the differences in pedagogical philosophy between statisticians and computer scientists. I will take some problems from and assign some optional readings out of Advanced R (Wickham 2015), another book that is available both in print and online. This is high level book for those who want to learn the gritty details of how R works, and is a great resource for students with a solid foundation in R and/or programming who want to deepen their understanding. I will adapt additional material from The Art of R Programming (Matloff 2011). This is a great reference for the basic features and programming constructs of R, but acquiring your own copy is optional. Course Outline This course is in development, but the following is a tentative list of topics that will be included. Each section begins with assigned reading material (which should be read first), then includes additional notes elaborating upon the important concepts or covering additional topics not included in the reading, and ends with exercises to be done as homework. R Code Input, output, running code Data Types and Operations Basic variable types (character, numeric, logical) Mathematical operations Special values (NULL, Inf, NaN) Data Structures Vectors, matrices, arrays, lists, data frames Conditional Execution and Loops Functions Debugging Applying Functions Efficiency and Parallelization Objects and Methods Introduction to Packages References "],
["r-code.html", "1 R Code 1.1 Assigned Reading 1.2 How Computers Execute Code 1.3 Running R Code from Source Files 1.4 Exercises", " 1 R Code print(), cat() typing in the terminal, source, Rscript Comments 1.1 Assigned Reading R4DS Sections 1.4-1.6 1.2 How Computers Execute Code The following notes are based upon the first chapter of Gaddis (2005). Figure 1-8 from Gaddis (2005): Clearly define what the program is to do. Visualize the program running on the computer. Use design tools such as a hierarchy chart, flowcharts, or pseudocode to create a model of the program. Check the model for logical errors. Type the code, save it, and compile it. Correct any errors found during compilation. Repeat steps 5 and 6 as many times as necessary. Run the program with test data for input. Correct any errors found while running the program. Repeat steps 5 through 8 as many times as necessary. Validate the results of the program. Some slight modifications are needed for interpretted languages like R. The “compile it” part of step 5 does not apply to most things you do in R, and you will typically combine steps 5 and 7 into “Type, the code, save it, and run it with test data for input.” Steps 6 and 8 also occur at the same time, but are conceptually different. Step 6 is about making sure your code makes sense to the computer; step 8 is about making sure the computer interprets your code the way you intended. 1.3 Running R Code from Source Files The file examples/intro_example.r contains the following code. # Add two numbers. 2 + 3 In the R terminal, use the source() command to run the code in the file. This command is an example of a function, or block of code that is reused by calling its name. The text in parentheses are inputs to the function, called arguments. The first argument (in quotes) is the name of the source file to read. The second argument, print.eval = TRUE, tells R to print out the results of any expressions in the source file. We will learn much more about functions in Section 5. source(&#39;examples/intro_example.r&#39;, print.eval = TRUE) #&gt; [1] 5 From the system terminal or command prompt, you can use the Rscript command execute R code saved in a file. Rscript examples/intro_example.r #&gt; [1] 5 1.4 Exercises The traditional first program written by students in a computer programming course is Hello World!, which simply prints the text “Hello World!” on the screen. Write R code to output “Hellow World!” (or something similar), save the code in a .r file, and run the file using either source() or Rscript. References "],
["data-types-and-operations.html", "2 Data Types and Operations", " 2 Data Types and Operations characters numeric (integer and double) logical "],
["data-structures.html", "3 Data Structures 3.1 Vectors 3.2 Matrices and Arrays 3.3 Lists 3.4 Data Frames", " 3 Data Structures 3.1 Vectors 3.2 Matrices and Arrays 3.3 Lists 3.4 Data Frames "],
["conditional-execution-and-loops.html", "4 Conditional Execution and Loops", " 4 Conditional Execution and Loops sky &lt;- &#39;blue&#39; if(sky == &#39;blue&#39;){ cat(&#39;Earth&#39;) }else if(sky == &#39;ref&#39;){ cat(&#39;Mars&#39;) }else cat(&#39;Where are we?&#39;) #&gt; Earth "],
["references.html", "References", " References "]
]
